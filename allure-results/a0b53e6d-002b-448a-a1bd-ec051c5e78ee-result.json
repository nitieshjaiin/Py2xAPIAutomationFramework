{"name": "Verify that booking can be updated", "status": "broken", "statusDetails": {"message": "TypeError: Object of type Response is not JSON serializable", "trace": "self = <tests.crud.test_crud.TestCrudBooking object at 0x00000257B909E480>, create_token = 'c47b07dff1749a5', get_booking_id = 743\n\n    @allure.title(\"Verify that booking can be updated\")\n    @allure.description(\"Verify that full update on a booking with a booking id and token is working\")\n    def test_update_booking_id_token(self, create_token, get_booking_id):\n        booking_id = get_booking_id\n        token = create_token\n        put_url = APIConstants.url_patch_put_delete(booking_id=booking_id)\n>       response = put_requests(url=put_url,\n                                headers=Util.common_headers_put_delete_patch_cookie(token=token),\n                                payload=payload_create_booking(),\n                                auth=None,\n                                in_json=False)\n\ntests\\crud\\test_crud.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\helpers\\api_requests_wrapper.py:23: in put_requests\n    return json.dumps(put_response_data)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\encoder.py:200: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\encoder.py:258: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x00000257B8D3AFC0>, o = <Response [200]>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type Response is not JSON serializable\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\encoder.py:180: TypeError"}, "description": "Verify that full update on a booking with a booking id and token is working", "attachments": [{"name": "stdout", "source": "cb0011d5-94e8-4358-80a9-0aa348c0785c-attachment.txt", "type": "text/plain"}], "start": 1712203952945, "stop": 1712203954378, "uuid": "e014cd70-d787-440f-98b7-838fdee49880", "historyId": "e7ee1fbc908c3a92bbb1bba3d3dca7f6", "testCaseId": "e7ee1fbc908c3a92bbb1bba3d3dca7f6", "fullName": "tests.crud.test_crud.TestCrudBooking#test_update_booking_id_token", "labels": [{"name": "parentSuite", "value": "tests.crud"}, {"name": "suite", "value": "test_crud"}, {"name": "subSuite", "value": "TestCrudBooking"}, {"name": "host", "value": "USHYDNITISHJ04"}, {"name": "thread", "value": "28204-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.crud.test_crud"}]}